namespace com.ibm.streamsx.adaptiveparser.cef;

use com.ibm.streamsx.adaptiveparser::*;

/**
 * CEFParser composite uses pre-configured AdaptiveParser operator, parameterized for CEF format parsing.
 * As an option, CEF header can be represented as list<rstring>\[7] instead of tuple
 * 
 * @input RawData blob or rstring data to be parsed
 * @output CEFEvent CEFParser.CEFHeader_t , CEFParser.CEFExtension_t
 * @param dataAttr an input attribute name which holds data to parse
 * @param batch expect multiple events when parsing the data
 */
public composite CEFParser(input RawData; output CEFEvent) {
param
	attribute $dataAttr;
	expression<boolean> $batch : false;

type
	static CEFSeverity_e	=	enum {Low, Medium, High, VeryHigh, Unknown};
	
	static CEFHeader_t		= 	uint16 version,
								rstring deviceVendor,
								rstring deviceProduct,
								rstring deviceVersion, 
								rstring signatureID, 
								rstring name, 
								CEFParser.CEFSeverity_e severity;

	static CEFExtension_t	=	map<rstring,rstring> properties;
	
graph
    
    stream<CEFParser.CEFHeader_t, CEFParser.CEFExtension_t> CEFEvent = AdaptiveParser(RawData) {
    	param
    		batch : $batch;
    		dataAttr : $dataAttr;
    		globalDelimiter : "|";
    		globalEscapeChar : "\\";
		output
			CEFEvent :
				version = Param({prefix = "CEF:"}),
				severity = Param({enumAliasesMap = {"Very-High" : "VeryHigh"}}),
				properties = Param( {cutStringDelim = "CEF:", delimiter = "", globalDelimiter = "", globalEscapeChar = ""},
					  				{key = ParamN({delimiter = "="}), value = ParamN({cutCharsetDelim = "a-zA-Z0-9_.)(-"})});
    }
}
