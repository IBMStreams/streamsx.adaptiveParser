namespace com.ibm.streamsx.adaptiveparser.cef;

use com.ibm.streamsx.adaptiveparser::*;

/*
 *  AdaptiveParser output port type generates the CEF parser
 *  As an option, CEF header can be represented as list<rstring>[7] instead of tuple<...>
 *  Parameters define general behavior: global delimiter is '|' and no skipping (otherwise enabled by default)
 *  Custom formats can be handled by custom output functions:
 *  'version' parses string like 'CEF:<ver>', so prefix 'CEF:' needed
 *  'properties' map does not need delimiter and disables it for key/values by propogating new empty 'globalDelimiter'
 *  'key' delimited by '='
 *  'value' delimited by whitespace followed by any of chars 'a-zA-Z0-9_.)(-' and 'key' delimiter
 *  here two subsequent key/values sample: 'requestClientApplication=Mozilla/5.0 (Windows NT 6.1) ahost=mytest.com'
 */
public composite CEFParser(input RawData; output CEFEvent) {
param
	attribute $dataAttr;
	expression<boolean> $batch : false;

type
	static CEFSeverity_e	=	enum {Low, Medium, High};
	
	static CEFHeader_t		= 	uint16 version,
								rstring deviceVendor,
								rstring deviceProduct,
								rstring deviceVersion, 
								rstring signatureID, 
								rstring name, 
								CEFSeverity_e severity;

	static CEFExtension_t	=	map<rstring,rstring> properties;
	
graph
    
    stream<CEFParser.CEFHeader_t, CEFParser.CEFExtension_t> CEFEvent = AdaptiveParser(RawData) {
    	param
    		batch : $batch;
    		dataAttr : $dataAttr;
    		globalDelimiter : "|";
    		globalSkipper : none;
		output
			CEFEvent :
				version = Param({prefix = "CEF:"}),
				properties = Param( {cutStringDelim = "CEF:", delimiter = "", globalDelimiter = "", globalSkipper = Skipper.whitespace},
					  				{key = ParamN({delimiter = "="}), value = ParamN({cutCharsetDelim = "a-zA-Z0-9_.)(-"})});
    }
}
