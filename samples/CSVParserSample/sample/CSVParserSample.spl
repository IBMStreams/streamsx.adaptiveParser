namespace sample;

use com.ibm.streamsx.adaptiveparser::*;

composite CSVParserSample {
graph
	stream<rstring data> CSVStream = Custom() {
        logic
            onProcess : {
                submit({data = "1427889600.657267, (1427889600,657267,0), Apr 1 14:33:10, text, 42, 3.14"}, CSVStream);
            }
    }
    
	/*
	 *  AdaptiveParser expects the input attribute to be of type blob or rstring
	 *  The data arrives as a string
	 *  Output SPL type generates the CSV parser
	 *  Parameters define general behavior: delimiter is ',' and any whitespaces should be skipped (also the default)
	 *  Custom formats can be handled by custom output functions:
	 *  timestamp ts1 has '.' as a token
	 *  timestamp ts2 has has a standard SPL format
	 *  timestamp ts3 has has a formatted string timestamp
	 */
    stream<timestamp ts1, timestamp ts2, timestamp ts3, rstring data, uint32 meaningOfLife, float64 pi> ParsedStream = AdaptiveParser(CSVStream) {
    	param
    		globalDelimiter : ",";
    		globalSkipper : whitespace;
		output
			ParsedStream :
//				ts1 = Param({tsToken = "."}),	no need - '.' is a default token
				ts2 = Param({tsFormat = "SPL"}),
				ts3 = Param({tsFormat = "%b %d %H:%M:%S"});
    }
    
    () as FSink = FileSink(ParsedStream) {
        param
            file : "/dev/stdout";
            flush : 1u;
    }
}
