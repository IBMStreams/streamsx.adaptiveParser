namespace sample;

use com.ibm.streamsx.adaptiveparser::*;

composite ParserStateSample {
param
	expression<rstring> $data : getSubmissionTimeValue("data", '0123456789');
graph
	stream<rstring data, uint64 skipCount> CSVFieldsStream = Beacon() {
		param
			iterations : 9u;
        output CSVFieldsStream:
			data = $data,
        	skipCount = IterationCount() + 1ul;
    }
    
	/*
	 *  AdaptiveParser expects the input attribute to be of type blob or rstring
	 *  Output SPL type generates the parser
	 *  Parameters define general behavior: delimiter is ',' and any whitespaces should be skipped (also the default)
	 *  Custom formats can be handled by custom output functions: Param and ParamN
	 */
    stream<rstring str> ParsedStream = AdaptiveParser(CSVFieldsStream) {
    	logic
    		state : {
    			mutable uint64 count = 0u;
			}
			onTuple CSVFieldsStream: count = skipCount;
    	param
    		dataAttr : data;
    	output ParsedStream:
//    		bl = Param({parseToState = "count", skipCountBefore = count}),
    		str = Param({skipCountBefore = count});
    }
    
    () as FSink = FileSink(ParsedStream) {
        param
            file : "/dev/stdout";
            flush : 1u;
    }
}

