namespace sample;

use com.ibm.streamsx.adaptiveparser::*;

composite KeyValueMapParserSample {
type
	/*
	 * Because a map cannot hold heterogeneous types - all the fields must be defined as rstring.
	 */
	MapProperties_t = map<rstring,rstring> properties;
graph
	stream<rstring data> CSVStream = Custom() {
        logic
            onProcess : {
            	/*
            	 * For a map the order of input fields is not significant
            	 */
                submit({data = "boolean_10 = false, rstring_9 = nine, float64_8 = 8.0008, uint16_7 = 7, uint32_6 = 6, int32_5 = 5, int16_4 = 4, float32_3 = 3.3, rstring_2 = two, boolean_1 = true"}, CSVStream);
            }
    }
    
	/*
	 *  AdaptiveParser expects a single input attribute or dataAttr param attribute to be of type blob or rstring
	 *  Output SPL type generates the KeyValue parser and maps it to SPL map. 
	 *  No parameters are defined but 'globalSkipper : whitespace' is applied implicitly
	 *  Custom Output functions Param and ParamN (for nested attributes) can apply specific options for specific attributes
	 */
    stream<MapProperties_t> ParsedMapStream = AdaptiveParser(CSVStream) {
    	output ParsedMapStream :
    		properties = Param({globalDelimiter = ","}, {key = ParamN({delimiter = "="}) });
    }
    
    /*
     * The implementation of SPL map is unordered map, so printing it shows fields in random order.
     */
    () as MapFSink = FileSink(ParsedMapStream) {
        param
            file : "/dev/stdout";
            flush : 1u;
            format : txt;
    }
}
