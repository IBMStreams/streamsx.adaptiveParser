namespace sample ;

use com.ibm.streamsx.adaptiveparser::* ;

composite KeyValueTupleParserSample {
type
	/*
	 * A tuple can hold heterogeneous types - each field can be defined as desired.
	 */
	TupleProperties_t = boolean boolean_1, rstring rstring_2, float32 float32_3, int16 int16_4, int32 int32_5, uint32 uint32_6, uint16 uint16_7, float64 float64_8, rstring rstring_9, boolean boolean_10;

graph
	stream<rstring data> CSVStream = Custom(){
		logic
			onProcess : {
				/*
				 *	For a tuple the order of input fields is critical, but KeyValue parser allows random order.
				 *	Here the fields are in inverse order
				 */
				submit({ data = "boolean_10 = false, rstring_9 = nine, float64_8 = 8.0008, uint16_7 = 7, uint32_6 = 6, int32_5 = 5, int16_4 = 4, float32_3 = 3.3, rstring_2 = two, boolean_1 = true" }, CSVStream);
			}

	}

	/*
	 *  AdaptiveParser expects a single input attribute or dataAttr param attribute to be of type blob or rstring		
	 *  Output SPL type generates the KeyValue parser and maps it to SPL tuple.		
	 *  Parameters:  key (attribute) delimiter is "=", while value delimiter is ',', whitespaces are skipped by default		
	 *  Parameters:
	 *  	'attrNameAsPrefix' - enables KeyValue parser for the current tuple
	 *  	'attrNameDelimiter' - key (attribute) delimiter
	 *  	'globalDelimiter' - value delimiter
	 *  	('globalSkipper' - whitespace skipper is applied implicitly)
	 */
	stream<TupleProperties_t> ParsedTupleStream = AdaptiveParser(CSVStream){
		param
			attrNameAsPrefix : true ;
			attrNameDelimiter : "=" ;
			globalDelimiter : "," ;
	}

    /*
     * The implementation of SPL tuple is a sequence, so printing it shows fields in order as they stored in the tuple, not as they came from the input.
     */
	()as TupleFSink = FileSink(ParsedTupleStream){
		param
			file : "/dev/stdout" ;
			flush : 1u ;
			format : txt;
		}

}
