<?xml version="1.0" encoding="UTF-8"?>
<operatorModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context verificationModule="">
      <description>
AdaptiveParser allows to parse any structured, semi-structured and unstructured input format accordingly to an output tuple schema.
Each primitive type attribute generates a mini parser, when grouped together they create a complex tuple parser. Tuple parsers can be nested.
Each collection type generates a collection parser that wraps a mini parser based on collection (key)/value type(s).

AdaptiveParser provides an ability to apply settings on any level: globally, partially or locally for a single attribute.

AdaptiveParser operator has two custom output functions: 
* Param applies parsing options only for top level attributes.
* ParamN applies parsing options for any nested level attributes.

One input port is allowed.
If there is only one blob/rstring attribute exists, it is taken as a data to be parsed. Otherwise dataAttr parameter should be applied.

Multiple output ports are allowed where each port defines an alternate parser.
If the last output port schema is identical to the input port schema then it is treated as an error port.	
      </description>
      <customLiterals>
        <enumeration>
          <name>Parsing</name>
          <value>full</value>
          <value>partial</value>
        </enumeration>
        <enumeration>
          <name>Skippers</name>
          <value>none</value>
          <value>blank</value>
          <value>control</value>
          <value>endl</value>
          <value>punct</value>
          <value>tab</value>
          <value>whitespace</value>
        </enumeration>
        <enumeration>
          <name>Schemes</name>
          <value>firstTypePaired</value>
          <value>openAttrNamePaired</value>
          <value>openTypeOrdered</value>
          <value>openTypeUnordered</value>
          <value>strictTypeOrdered</value>
        </enumeration>
      </customLiterals>
      <customOutputFunctions>
        <customOutputFunction>
          <name>AdaptiveParserFS</name>
          <function pseudoFunction="true">
            <description>Assign custom value to the output attribute.</description>
            <prototype>&lt;any T> T AsIs(T v)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
                Apply custom options to the top level attribute.

                The function has one tuple argument:
                	Param({delimiter="|", skipper=Skipper.blank, ...})
                The following parameters may be used:
				* attrFieldName: set alias for an attribute name (applicable when tupleScheme is 'openAttrNamePaired')
				* attrNameDelimiter: set delimiter for an attribute name (applicable when tupleScheme is 'openAttrNamePaired')
				* attrNameQuoted: expect an attribute name with quotes (applicable when tupleScheme is 'openAttrNamePaired')
				* base64Mode: set base64 decoding for the current string attribute
				* binaryMode: set binary encoding for the numeric attribute
				* cutCharsetDelim: set multiple delimiters the input will be searched first then parsed
				* cutStringDelim: set delimiter the input will be searched first then parsed
				* cutSkipper: set skipper the input will be searched first then parsed
				* defaultValue: apply default value for an optional attribute
				* delimiter: set delimiter for an attribute
				* escapeChar: set escaping character(s) for an attribute,
				* hexCharPrefix: set escaping character(s) for an attribute
				* globalAttrNameDelimiter: like attrNameDelimiter, apply to all nested levels (the current level is left unchanged)
				* globalAttrNameQuoted: like attrNameQuoted, apply to all nested levels (the current level is left unchaged)
				* globalDelimiter: like delimiter, apply to all nested levels (the current level is left unchanged)
				* globalEscapeChar: like escapeChar, apply to all nested levels (the current level is left unchanged)
				* globalSkipper: like skipper, apply to all nested levels (the current level is left unchanged)
				* globalTupleScheme: like tupleScheme, apply to all nested levels (the current level is left unchanged)
				* optional: an attribute can be skipped (taking a default value)
				* parseToState: an input field can be parsed to a state (maybe be used for skipCounter or just to drop a part of the input)
				* regexFilter: an attribute is filtered by regex expression and if fails the entire tuple parsing will be failed (use with an error port) 
				* quotedOptStrings: an attribute may have quotes (applicable only for strings)
				* quotedStrings: expect an attribute with quotes (applicable only for strings)
				* prefix: expect a prefix before the attribute (applicable only for primitive types)
				* suffix: expect a suffix after the attribute (applicable only for primitive types)
				* listPrefix: expect a prefix before the attribute (applicable only for lists/sets and inherited)
				* listSuffix: expect a suffix after the attribute (applicable only for lists/sets and inherited)
				* mapPrefix: expect a prefix before the attribute (applicable only for maps and inherited)
				* mapSuffix: expect a suffix after the attribute (applicable only for maps and inherited)
				* tuplePrefix: expect a prefix before the attribute (applicable only for tuples and inherited)
				* tupleSuffix: expect a suffix after the attribute (applicable only for tuples and inherited)
				* tsFormat: defines a string representation of timestamp (see the system man page for strptime)
				* tsToken: defines a character separator for epoch timestamp
				* bound: defines a bounded length type (not the value - e.g. 0uh) that parsed before the attribute (applicable only for strings)
				* skipCountAfter: sets a count of bytes to skip after the attribute
				* skipCountBefore: sets a count of bytes to skip before the attribute
				* skipChars: set character(s) to be skipped (applicable only for strings)
				* enumAliasesMap: defines alternate names for enum values (applicable only for enums)
				* skipper: set a skipper for all or subset of whitespaces to be skipped.
				* tupleScheme: an attribute data scheme (applicable only for tuples)
            </description>
            <prototype>&lt;any A, tuple T> A Param(T options)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
            Skip top level attribute and apply custom options to the next nested level attribute.

            The function has one anonymous '_' agrument (no options for the top level) and one tuple argument:
            	Param(_, {attr2level = ParamN({delimiter="|", skipper=Skipper.blank, ...})})
            </description>
            <prototype>&lt;any A, tuple T> A Param(enum{_} options, T deepOptions)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
            Apply custom options to the top and the next nested level attributes.

            The function has two tuple arguments:
            	Param({delimiter="|", skipper=Skipper.none, ...}, {attr2level = ParamN({delimiter=",", skipper=Skipper.blank, ...})})
            </description>
            <prototype>&lt;any A, tuple T1, tuple T2> A Param(T1 options, T2 deepOptions)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
            Apply custom options to the current (non top level) attribute.

            The function has one tuple argument:
            	ParamN({delimiter="|", skipper=Skipper.none, ...})
            </description>
            <prototype>&lt;tuple T> boolean ParamN(T options)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
            Skip current (non top level) attribute and apply custom options to the next nested level attribute.

            The function has one anonymous '_' agrument (no options for the current level) and one tuple argument:
            	ParamN(_, {attr2level = ParamN({delimiter="|", skipper=Skipper.blank, ...})})
            </description>
            <prototype>&lt;tuple T> boolean ParamN(enum{_} options, T deepOptions)</prototype>
          </function>
          <function pseudoFunction="true">
            <description>
            Apply custom options to the current (non top level) and the next nested attribute levels.

            The function has two tuple arguments:
            	ParamN({delimiter="|", skipper=Skipper.none, ...}, {attr2level = ParamN({delimiter=",", skipper=Skipper.blank, ...})})
            </description>
            <prototype>&lt;tuple T1, tuple T2> boolean ParamN(T1 options, T2 deepOptions)</prototype>
          </function>
        </customOutputFunction>
      </customOutputFunctions>
      <libraryDependencies>
        <library>
          <cmn:description></cmn:description>
          <cmn:managedLibrary>
            <cmn:includePath>../../impl/include</cmn:includePath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
      <allowCustomLogic>true</allowCustomLogic>
      <splExpressionTree cppCode="true" output="true"/>
    </context>
    <parameters>
      <description>Parameters allow to customize the global behavior of the operator. Most of the parameters can be applied also inside Param/ParamN functions.</description>
      <allowAny>false</allowAny>
      <parameter>
        <name>allowEmpty</name>
        <description>
        Allows empty value applying a default value instead.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>batch</name>
        <description>
        Parse an input tuple as a bulk of data. Can submit multiple output tuples.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>binaryMode</name>
        <description>
        All numeric parsers will parse the input as binary words.
        	valid in Param/ParamN: yes
        	non-global version: binaryMode
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>parsingMode</name>
        <description>
        Can be full or partial. In a partial mode the parsing succeeds when the whole output tuple is filled without checking if the input end is reached.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>Parsing</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>dataAttr</name>
        <description>
        Sets the input attribute holding the data to parse.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Attribute</expressionMode>
        <type></type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>passAttrs</name>
        <description>
        Sets input attributes that should be copied to the output attributes. Those output attributes will not parse the input.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Attribute</expressionMode>
        <type></type>
        <cardinality>-1</cardinality>
      </parameter>
      <parameter>
        <name>comment</name>
        <description>
        Sets the comment characters in the beginning of an input data. the input will be skipped.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>explain</name>
        <description>
        Prints to the output console additional information about the parsing.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Expression</expressionMode>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalAttrNameQuoted</name>
        <description>
        When tupleScheme is set to 'openAttrNamePaired' (key/value) expects keys to be quoted.
        	valid in Param/ParamN: yes
        	non-global version: attrNameQuoted
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalAttrNameDelimiter</name>
        <description>
        When tupleScheme is set to 'openAttrNamePaired' (key/value) expects keys to be delimited.
	        valid in Param/ParamN: yes
	        non-global version: attrNameDelimiter
	        inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalDelimiter</name>
        <description>
        A field delimiter - usually 1 or more characters.
        	valid in Param/ParamN: yes
        	non-global version: delimiter
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalEscapeChar</name>
        <description>
        A field escape character.
        	valid in Param/ParamN: yes
        	non-global version: escapeChar
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalSkipper</name>
        <description>
        Set a skipper for all or subset of whitespaces to be skipped. Can be set to values:
        	none: whitespaces are not skipped and parsed as part of the input data
        	blank: all whitespaces are skipped except new lines
        	endl: only new lines are skipped
        	control: all control characters are skipped
        	punct: all punct characters are skipped
        	tab: only tabs are skipped
        	whitespace (default): all whitespaces are skipped

        	valid in Param/ParamN: yes
        	non-global version: skipper
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>Skippers</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>globalTupleScheme</name>
        <description>
        An input data scheme. Can be set to values:
        	firstTypePaired: alternate parser - each tuple attribute tries to parse the input until one succeeds
        	openAttrNamePaired: tuple attributes parse the input as key/value pairs in any order, missing fields are allowed
        	openTypeOrdered: tuple attributes parse the input in a sequence, missing fields are allowed
        	openTypeUnordered: tuple attributes parse the input in any order, missing fields are allowed
        	strictTypeOrdered (default): tuple attributes parse the input in a sequence, all of them must be present 

        	valid in Param/ParamN: yes
        	non-global version: tupleScheme
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>Schemes</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tupleScheme</name>
        <description>
        An input data scheme. Can be set to values: the same as globalTupleScheme.
        	valid in Param/ParamN: yes
        	global version: globalTupleScheme
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>Schemes</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>startFrom</name>
        <description>
        Start parsing from the given character(s) skipping all the previous data from the beginning. 
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>listPrefix</name>
        <description>
        Defines a preceding list/set character(s).
        	valid in Param/ParamN: yes
        	non-global version: listPrefix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>listSuffix</name>
        <description>
        Defines a succeeding list/set character(s).
        	valid in Param/ParamN: yes
        	non-global version: listSuffix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>mapPrefix</name>
        <description>
        Defines a preceding map character(s).
        	valid in Param/ParamN: yes
        	non-global version: mapPrefix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>mapSuffix</name>
        <description>
        Defines a succeeding map character(s).
        	valid in Param/ParamN: yes
        	non-global version: mapSuffix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tuplePrefix</name>
        <description>
        Defines a preceding tuple character(s).
        	valid in Param/ParamN: yes
        	non-global version: tuplePrefix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tupleSuffix</name>
        <description>
        Defines a succeeding tuple character(s).
        	valid in Param/ParamN: yes
        	non-global version: tupleSuffix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>prefix</name>
        <description>
        Defines a preceding attribute character(s).
        	valid in Param/ParamN: yes
        	non-global version: prefix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>suffix</name>
        <description>
        Defines a succeeding attribute character(s).
        	valid in Param/ParamN: yes
        	non-global version: suffix
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tsFormat</name>
        <description>
        Defines a string representation of timestamp (see the system man page for strptime)
        	valid in Param/ParamN: yes
        	non-global version: tsFormat
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>tsToken</name>
        <description>
        Defines a character separator for epoch timestamp.
        	valid in Param/ParamN: yes
        	non-global version: tsToken
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>quotedOptStrings</name>
        <description>
        Allows string attributes to be optionally quoted.
        	valid in Param/ParamN: yes
        	non-global version: quotedOptStrings
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>quotedStrings</name>
        <description>
        Expects string attributes to be quoted.
        	valid in Param/ParamN: yes
        	non-global version: quotedStrings
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>undefined</name>
        <description>
        Sets undefined value(s) for input fields.
        	valid in Param/ParamN: no
        	non-global version: no
        	inherited: yes
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>rstring</type>
        <cardinality>-1</cardinality>
      </parameter>
      <parameter>
        <name>skipCountAfter</name>
        <description>
        Sets number of characters to skip after the current attribute.
        	valid in Param/ParamN: yes
        	non-global version: skipCountAfter
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>skipCountBefore</name>
        <description>
        Sets number of characters to skip before the current attribute.
        	valid in Param/ParamN: yes
        	non-global version: skipCountBefore
        	inherited: no
        </description>
        <optional>true</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>Constant</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>The input data port. Logic can be applied, e.g. to update state.</description>
        <windowingDescription></windowingDescription>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <windowExpressionMode>AttributeFree</windowExpressionMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
      <inputPortOpenSet>
        <description>The control input port(s) is only for logic section, e.g. to update state.</description>
        <windowingDescription/>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>true</controlPort>
      </inputPortOpenSet>
    </inputPorts>
    <outputPorts>
      <outputPortOpenSet>
        <description></description>
        <expressionMode>AttributeFree</expressionMode>
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>false</rewriteAllowed>
        <outputFunctions>
          <default>AsIs</default>
          <type>AdaptiveParserFS</type>
        </outputFunctions>
        <windowPunctuationOutputMode>Preserving</windowPunctuationOutputMode>
        <windowPunctuationInputPort>0</windowPunctuationInputPort>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <allowNestedCustomOutputFunctions>true</allowNestedCustomOutputFunctions>
      </outputPortOpenSet>
    </outputPorts>
  </cppOperatorModel>
</operatorModel>