<%SPL::CodeGen::implementationPrologue($model);%>

<%# [----- perl code -----]
use AdaptiveParserCommon;

my $inputPort = $model->getInputPortAt(0);
my $outputPort2 = $model->getOutputPortAt(1) if ($model->getNumberOfOutputPorts() > 1) ;

my $batch = ($_ = $model->getParameterByName('batch')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
my $parsingMode = ($_ = $model->getParameterByName('parsingMode')) ? $_->getValueAt(0)->getSPLExpression() : 'full';

my $dataAttr = $model->getParameterByName('dataAttr');

if ($dataAttr) {
	my $dataAttrSPLValue = (split /\./, $dataAttr->getValueAt(0)->getSPLExpression())[-1];
	SPL::CodeGen::checkMinimalSchema ($inputPort, { name => $dataAttrSPLValue, type => ["blob", "rstring"] });
}
elsif ($inputPort->getNumberOfAttributes == 1) {
	SPL::CodeGen::checkMaximalSchema ($inputPort, { type => ["blob", "rstring"] });
}
else {
	SPL::CodeGen::exitln("Input port has more than 1 attribute - specify dataAttr parameter", $inputPort->getSourceLocation());
}

my $dataAttrCppValue = $dataAttr ? $dataAttr->getValueAt(0)->getCppExpression() : 'iport$0.get_'.$inputPort->getAttributeAt(0)->getName().'()';

my @passAttrs = ($model->getParameterByName('passAttrs')) ? map { (split /\./, $_->getSPLExpression())[-1] } @{$model->getParameterByName('passAttrs')->getValues()} : ();

if (@passAttrs) {
	my $outputAttrs = $model->getOutputPortAt(0)->getAttributes();
	if (@passAttrs >= @{$outputAttrs}) {
		SPL::CodeGen::exitln("The number of passed input attributes must be less than the number of output attributes", $inputPort->getSourceLocation());
	}
	
	foreach my $attr (@{$outputAttrs}) {
		my $attrName = $attr->getName();
		if (($attrName ~~ @passAttrs) && ($attr->getCppType() ne $inputPort->getAttributeByName($attrName)->getCppType())) {
			SPL::CodeGen::exitln("The passed input attribute '%s' must be of the same type in the corresponding output port", $attrName, $inputPort->getSourceLocation());
		}
	}
}

SPL::CodeGen::exitln("Error output port and input port schemas must match", $inputPort->getSourceLocation()) if($outputPort2 && $inputPort->getCppTupleType() ne $outputPort2->getCppTupleType());

my $oTupleName = 'oport0';
my $oTupleCppType = $model->getOutputPortAt(0)->getCppTupleType();
my $oTupleSplType = $model->getOutputPortAt(0)->getSPLTupleType();
my $oTupleSrcLocation = $model->getOutputPortAt(0)->getSourceLocation();

# [----- perl code -----]%>

MY_OPERATOR::MY_OPERATOR() : tupleParser() {}
MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {}
void MY_OPERATOR::prepareToShutdown() {}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {

	IPort0Type const & iport$0 = static_cast<IPort0Type const&>(tuple);

	charPtr iter_start;
	charPtr iter_end;
	
	setInputIterators(<%=$dataAttrCppValue%>, iter_start, iter_end);

<%if ($batch) {%>
	while(iter_start < iter_end) {
<%}%>
		OPort0Type otuple;

<%if (@passAttrs) {
	foreach my $attrName (@passAttrs) {%>
		otuple.set_<%=$attrName%>(iport$0.get_<%=$attrName%>());
	<%}
}%>
		
		bool isCommented = false;
		bool parsed = qi::parse(iter_start, iter_end, tupleParser(ref(isCommented)), otuple);

		if(!isCommented) {
			if(!parsed <%=$batch || ($parsingMode eq 'partial') ? '' : '|| iter_start != iter_end'%>) {
				<%if ($model->getNumberOfOutputPorts() > 1) {%>
					submit(tuple, 1);
				<%}
				else {%>
					SPLAPPLOG(L_ERROR, "Parsing did not complete successfully", "PARSE");
					submit(otuple, 0);
				<%}%>
			}
			else {
				submit(otuple, 0);
			}
		}
<%if ($batch) {%>
	}
<%}%>
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
   forwardWindowPunctuation(punct);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
