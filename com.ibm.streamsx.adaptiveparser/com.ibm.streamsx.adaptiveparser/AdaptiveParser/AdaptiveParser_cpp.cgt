<%SPL::CodeGen::implementationPrologue($model);%>

<%# [----- perl code -----]
use AdaptiveParserCommon;

my $inputPort = $model->getInputPortAt(0);
my $batch = ($_ = $model->getParameterByName('batch')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
my $parsingMode = ($_ = $model->getParameterByName('parsingMode')) ? $_->getValueAt(0)->getSPLExpression() : 'full';
my $dataAttr = $model->getParameterByName('dataAttr');
if ($dataAttr) {
	my $dataAttrSPLValue = (split /\./, $dataAttr->getValueAt(0)->getSPLExpression())[-1];
	SPL::CodeGen::checkMinimalSchema ($inputPort, { name => $dataAttrSPLValue, type => ["blob", "rstring"] });
}
elsif ($inputPort->getNumberOfAttributes == 1) {
	SPL::CodeGen::checkMaximalSchema ($inputPort, { type => ["blob", "rstring"] });
}
else {
	SPL::CodeGen::exitln("Input port has more than 1 attribute - specify dataAttr parameter", $inputPort->getSourceLocation());
}

my $dataAttrCppValue = $dataAttr ? $dataAttr->getValueAt(0)->getCppExpression() : 'iport$0.get_'.$inputPort->getAttributeAt(0)->getName().'()';

my $oTupleName = 'oport0';
my $oTupleCppType = $model->getOutputPortAt(0)->getCppTupleType();
my $oTupleSplType = $model->getOutputPortAt(0)->getSPLTupleType();
my $oTupleSrcLocation = $model->getOutputPortAt(0)->getSourceLocation();

# [----- perl code -----]%>

MY_OPERATOR::MY_OPERATOR() : tupleParser() {}
MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {}
void MY_OPERATOR::prepareToShutdown() {}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {

	IPort0Type const & iport$0 = static_cast<IPort0Type const&>(tuple);

	charPtr iter_start;
	charPtr iter_end;
	
	setInputIterators(<%=$dataAttrCppValue%>, iter_start, iter_end);

<%if ($batch) {%>
	while(iter_start < iter_end) {
<%}%>
		OPort0Type otuple;

		bool isCommented;
		bool parsed = qi::parse(iter_start, iter_end, tupleParser(ref(isCommented)), otuple);

		if(!isCommented) {
			if(!parsed <%=$batch || ($parsingMode eq 'partial') ? '' : '|| iter_start != iter_end'%>)
				SPLAPPLOG(L_ERROR, "Parsing did not complete successfully", "PARSE");
	
			submit(otuple, 0);
		}
<%if ($batch) {%>
	}
<%}%>
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
   forwardWindowPunctuation(punct);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

//qi::unused_type streams_boost::fusion::extension::struct_member<SPL::BeJwrMcwtLjbMBQAKbgKX, 1>::dummy;
