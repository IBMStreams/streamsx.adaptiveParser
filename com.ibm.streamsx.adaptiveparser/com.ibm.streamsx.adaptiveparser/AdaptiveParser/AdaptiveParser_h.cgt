#include <SPL/Runtime/Type/Enum.h>
#include <SPL/Runtime/Type/SPLType.h>
#include <SPL/Runtime/Function/TimeFunctions.h>
#include <streams_boost/scoped_ptr.hpp>
#include "time.h"

// #define STREAMS_BOOST_SPIRIT_QI_DEBUG

<%# [----- perl code -----]
BEGIN {*Type:: = *SPL::CodeGen::Type::};
use AdaptiveParserCommon;

my $batch = ($_ = $model->getParameterByName('batch')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
my $explain = ($_ = $model->getParameterByName('explain')) ? $_->getValueAt(0)->getCppExpression() : 0;
my $startFrom = ($_ = $model->getParameterByName('startFrom')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';

my $parserOpt = {};
$parserOpt->{'allowEmpty'} = ($_ = $model->getParameterByName('allowEmpty')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'binaryMode'} = ($_ = $model->getParameterByName('binaryMode')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'globalAttrNameQuoted'} = ($_ = $model->getParameterByName('globalAttrNameQuoted')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'quotedOptStrings'} = ($_ = $model->getParameterByName('quotedOptStrings')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'quotedStrings'} = ($_ = $model->getParameterByName('quotedStrings')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'skipCountAfter'} = ($_ = $model->getParameterByName('skipCountAfter')) ? $_->getValueAt(0)->getSPLExpression() : 0;
$parserOpt->{'skipCountBefore'} = ($_ = $model->getParameterByName('skipCountBefore')) ? $_->getValueAt(0)->getSPLExpression() : 0;
$parserOpt->{'comment'} = ($_ = $model->getParameterByName('comment')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'globalAttrNameDelimiter'} = ($_ = $model->getParameterByName('globalAttrNameDelimiter')) ? $_->getValueAt(0)->getSPLExpression() : '';
$parserOpt->{'globalDelimiter'} = ($_ = $model->getParameterByName('globalDelimiter')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'globalEscapeChar'} = ($_ = $model->getParameterByName('globalEscapeChar')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'globalSkipper'} = ($_ = $model->getParameterByName('globalSkipper')) ? Types::getSkipper($_->getValueAt(0)->getSPLExpression()) : 'space';
$parserOpt->{'globalTupleScheme'} = ($_ = $model->getParameterByName('globalTupleScheme')) ? Types::getSchemeOp($_->getValueAt(0)->getSPLExpression()) : '>>';
$parserOpt->{'skipper'} = $parserOpt->{'skipperLast'} = $parserOpt->{'globalSkipper'};
$parserOpt->{'tupleScheme'} = ($_ = $model->getParameterByName('tupleScheme')) ? Types::getSchemeOp($_->getValueAt(0)->getSPLExpression()) : $parserOpt->{'globalTupleScheme'};
$parserOpt->{'listPrefix'} = ($_ = $model->getParameterByName('listPrefix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'listSuffix'} = ($_ = $model->getParameterByName('listSuffix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'mapPrefix'} = ($_ = $model->getParameterByName('mapPrefix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'mapSuffix'} = ($_ = $model->getParameterByName('mapSuffix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'tuplePrefix'} = ($_ = $model->getParameterByName('tuplePrefix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'tupleSuffix'} = ($_ = $model->getParameterByName('tupleSuffix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'prefix'} = ($_ = $model->getParameterByName('prefix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'suffix'} = ($_ = $model->getParameterByName('suffix')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'tsFormat'} = ($_ = $model->getParameterByName('tsFormat')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
$parserOpt->{'tsToken'} = ($_ = $model->getParameterByName('tsToken')) ? Types::getStringValue($_->getValueAt(0)->getSPLExpression()) : '';
@{$parserOpt->{'passAttrs'}} = ($model->getParameterByName('passAttrs')) ? map { (split /\./, $_->getSPLExpression())[-1] } @{$model->getParameterByName('passAttrs')->getValues()} : ();
$parserOpt->{'undefined'} = $model->getParameterByName('undefined');

my $lastOutputPortNum = $model->getNumberOfOutputPorts() - 1;
my $errorPortExists = $model->getInputPortAt(0)->getCppTupleType() eq $model->getOutputPortAt($lastOutputPortNum)->getCppTupleType();
my $lastDataPortNum = $errorPortExists ? $lastOutputPortNum -1 : $lastOutputPortNum;
my $operatorDefined = 0;

foreach my $i (0..$lastDataPortNum)	{

my $oTupleCppType = "oport$i";
my $oTupleSplType = $model->getOutputPortAt($i)->getSPLTupleType();
my $oTupleSrcLocation = $model->getOutputPortAt($i)->getSourceLocation();

my $oAttrParams = $model->getOutputPortAt($i);

our %stateVars = map { (split /\$/, $_->getName())[-1] => [$_->getName(), $_->getCppType(), $_->getSPLType()] } @{$model->getContext()->getStateVariables()};
my @states = keys %stateVars;

my $structs = [];
my $STREAMS_FUSION_MAX_VECTOR_SIZE = 10;
AdaptiveParserCommon::buildStructs($oTupleSrcLocation, $oTupleCppType, $oTupleSplType, $structs, $oAttrParams, $parserOpt, \$STREAMS_FUSION_MAX_VECTOR_SIZE);

SPL::CodeGen::errorln("More than 50 attributes on the same level of tuple is not supported", $oTupleSrcLocation)  if ($STREAMS_FUSION_MAX_VECTOR_SIZE > 50);
# [----- perl code -----]%>

#define STREAMS_FUSION_MAX_VECTOR_SIZE <%=$STREAMS_FUSION_MAX_VECTOR_SIZE%>
//#define STREAMS_BOOST_FUSION_DONT_USE_PREPROCESSED_FILES

<% if ($STREAMS_FUSION_MAX_VECTOR_SIZE > 20) {%>
#define STREAMS_BOOST_MPL_LIMIT_LIST_SIZE <%=int($STREAMS_FUSION_MAX_VECTOR_SIZE / 10 + 0.99)*10%>
#define STREAMS_BOOST_MPL_LIMIT_VECTOR_SIZE STREAMS_BOOST_MPL_LIMIT_LIST_SIZE
#define STREAMS_BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
<%}%>

#include "Spirit.h"

<%unless ($operatorDefined) { $operatorDefined = 1;%>

<%foreach my $i (0..$lastDataPortNum) {%>
  template <typename Iterator, typename MY_OP> struct TupleParserGrammar<%=$i%>;
<%}%>

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR {
public:
  typedef const char* charPtr;

  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 

  void allPortsReady(); 
  void prepareToShutdown(); 

  template<typename OTuple, typename TupleParser>
  bool parse(OTuple & otuple, TupleParser const& tupleParser, uint32_t port, charPtr iter_start, charPtr iter_end);
  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);
  
  template<typename OTuple>
  void setDefaultValues(OTuple & otuple) {
	  <%=@{$structs->[-1]->{'defaults'}}%>
  }

<%# [----- perl code -----]
  my $cppExprs = $structs->[-1]->{'cppExprs'};
  for my $cppExpr (keys %{$cppExprs}) {
  print qq(
	typedef STREAMS_BOOST_TYPEOF(($cppExprs->{$cppExpr})) t_$cppExpr;
	t_$cppExpr $cppExpr() {
	  return $cppExprs->{$cppExpr};
	}
  );
  }

  my $regexes = $structs->[-1]->{'regexes'};
  for my $regex (keys %{$regexes}) {
  print qq(
	bool $regex(iterator_range<charPtr> const& range) {
	  static cregex re = cregex::compile($regexes->{$regex});
	  return regex_search(range.begin(), range.end(), re);
	}
  );
  }
# [----- perl code -----]%>

private:

  void setInputIterators(const blob & raw, charPtr & iter_start, charPtr & iter_end) {
	iter_start = reinterpret_cast<charPtr>(raw.getData());
	iter_end = reinterpret_cast<charPtr>(raw.getData() + raw.getSize());
  }
  
  void setInputIterators(const std::string & row, charPtr & iter_start, charPtr & iter_end) {
	iter_start = row.data();
	iter_end = iter_start + row.size();
  }

  <%foreach my $k (0..$lastDataPortNum)	{%>
  	streams_boost::scoped_ptr<TupleParserGrammar<%=$k%><charPtr, MY_OPERATOR> > tupleParser<%=$k%>;
  <%}%> 
}; 

<%SPL::CodeGen::headerEpilogue($model);%>
<%}%>

typedef <%=$model->getOutputPortAt($i)->getCppTupleType()%> oport<%=$i%>;

<%my $baseRule = "oport$i\_base";%>

using namespace ::ext;
template <typename Iterator, typename MY_OP>
struct TupleParserGrammar<%=$i%> : qi::grammar<Iterator, oport<%=$i%>(bool&)> {
//	typedef TupleParserGrammar<%=$i%><Iterator, MY_OP> TPG;

    TupleParserGrammar<%=$i%>(MY_OP & _op) : TupleParserGrammar<%=$i%>::base_type(<%=$baseRule%>), op(_op) {

<%# [----- perl code -----]

for my $symbols (values %{$structs->[-1]->{'symbols'}}) {
print qq(
		$symbols->{'enumName'}.add @{$symbols->{'enumValues'}} @{[values %{$symbols->{'enumAliasesMap'}}]};
);
}

if ($parserOpt->{'undefined'}) {
	my $undefValue;
	my @undefinedValues = map { $_->getSPLExpression() ne '""' ? '('.$_->getSPLExpression().', qi::unused)' : () } @{$parserOpt->{'undefined'}->getValues()};
	SPL::CodeGen::errorln("Empty values cannot be assigned to parameter 'undefined'", $oTupleSrcLocation)  unless (@undefinedValues);

print qq(
		undefined.add @undefinedValues;
);

}

foreach my $struct (@{$structs}) {
if (scalar %{$struct}) {
	my $operator = $struct->{'tupleScheme'};
	my $eq =  $operator eq '|' ? '=' : '%=';
	my $skipper = $struct->{'skipper'} ? "skip($struct->{'skipper'})" : 'lexeme';

	my $rule = join(" $operator ", @{$struct->{'ruleBody'}});
	$rule = "lit($parserOpt->{'tuplePrefix'}) >> $rule" if ($struct->{'cppType'} eq "oport$i" && $parserOpt->{'tuplePrefix'});
	$rule = "eps >> $rule" if ($struct->{'size'} == 1); # patch for single element tuple
	$rule = $skipper."[$rule]";
	if ($struct->{'cppType'} eq "oport$i") {
		if ($parserOpt->{'tupleSuffix'}) {
			$rule = "$rule >> lit($parserOpt->{'tupleSuffix'})" if ($batch);
			$rule = "reparse2(byte_ - (lit($parserOpt->{'tupleSuffix'}) | eoi))[$rule] >> lit($parserOpt->{'tupleSuffix'})" unless ($batch);
		}
		$rule = "advance($parserOpt->{'skipCountBefore'}) >> $rule" if ($parserOpt->{'skipCountBefore'});
		$rule .= " >> advance($parserOpt->{'skipCountAfter'})" if ($parserOpt->{'skipCountAfter'});
		$rule = "skip(byte_ - lit($startFrom))[eps] >> $rule" if ($startFrom);
		$rule = "!lit($parserOpt->{'comment'})[_r1 = val(true)] >> eps[_r1 = val(false)] >> $rule" if ($parserOpt->{'comment'});
	}
print qq(
		$struct->{'ruleName'} $eq $rule;
);
}
}
# [----- perl code -----]%>

    	<%=$baseRule%>.name("oport<%=$i%>");

//		on_error<fail> (<%=$baseRule%>, std::cout
//				<< val("Error! Expecting ")
//				<< _4                               // what failed?
//				<< val("\nhere:")
//				<< std::endl
//				<< construct<std::string>(_3, _2)   // iterators to error-pos, end
//				<< std::endl
//		);

//		STREAMS_BOOST_SPIRIT_DEBUG_NODE(<%=$baseRule%>);

<%if ($explain) {%>
	if(<%=$explain%>)
		qi::debug(<%=$baseRule%>);
<%}%>
	
    }

private:

	MY_OP & op;
//	qi::real_parser<double, qi::strict_ureal_policies<double> > double_;
//	qi::real_parser<float, qi::strict_ureal_policies<float> > float_;
	qi::int_parser<unsigned char, 16, 2, 2> hex2;

	boolean_ boolean;
	dummy_ dummy;
	qi::symbols<char, qi::unused_type> undefined;
    
<%# [----- perl code -----]

for my $symbols (values %{$structs->[-1]->{'symbols'}}) {
print qq(
	qi::symbols<char, $symbols->{'enumType'}> $symbols->{'enumName'};
);
}

foreach my $struct (@{$structs}) {
	if (scalar %{$struct} && $struct->{'cppType'} ne "oport$i") {
print qq(
	qi::rule<Iterator, $struct->{'cppType'}()> $struct->{'ruleName'};
);
	}
}
# [----- perl code -----]%>

    qi::rule<Iterator, oport<%=$i%>(bool&)> oport<%=$i%>_base;

};

<%# [----- perl code -----]

if (defined($structs->[-1]->{'xml'})) {
	my @xmlDefs = values %{$structs->[-1]->{'xml'}};
	
	foreach my $cppType (@xmlDefs) {
print qq(
	namespace streams_boost { namespace spirit { namespace traits {
	template <typename Iterator>
	struct assign_to_attribute_from_iterators<$cppType, Iterator> {
		static void call(Iterator const& first, Iterator const& last, $cppType & attr) {
			attr = $cppType( SPL::rstring(first,last));
		}
	};
	}}}
);
	}

}

if (defined($structs->[-1]->{'tuple1'})) {
	my @splTupleDefs = keys %{$structs->[-1]->{'tuple1'}};
	my @cppTupleDefs = values %{$structs->[-1]->{'tuple1'}};
	
	for (my $i = 0; $i < @splTupleDefs; $i++) {
		my $splAttrName = (Type::getAttributeNames($splTupleDefs[$i]))[0];
		my $splAttrType = (Type::getAttributeTypes($splTupleDefs[$i]))[0];
		my $cppTupleType = $cppTupleDefs[$i];
		my $cppAttrType = "$cppTupleType\::$splAttrName\_type";
		my $assignOp = Type::isString($splAttrType) || Type::isCollection($splAttrType) ? 'assign_to_container_from_value' : 'assign_to_attribute_from_value';
print qq(
	namespace streams_boost { namespace spirit { namespace traits {
		template <>
		struct $assignOp<$cppAttrType, $cppTupleType> {
			static void call(const $cppTupleType & attr, $cppAttrType& val) {
				val = attr.get_$splAttrName();
			}
		};
	}}}
);
	}

}

foreach my $struct (@{$structs}) {
print qq(
	$struct->{'traits'}
	$struct->{'extension'}
);
}

}
# [----- perl code -----]%>
