#include <SPL/Runtime/Type/Enum.h>
#include <SPL/Runtime/Type/SPLType.h>
#include <SPL/Runtime/Function/TimeFunctions.h>
#include "time.h"

<%# [----- perl code -----]
BEGIN {*Type:: = *SPL::CodeGen::Type::};
use AdaptiveParserCommon;

my $parserOpt = {};
$parserOpt->{'binaryMode'} = ($_ = $model->getParameterByName('binaryMode')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'quotedStrings'} = ($_ = $model->getParameterByName('quotedStrings')) ? $_->getValueAt(0)->getSPLExpression() eq 'true' : 0;
$parserOpt->{'comment'} = ($_ = $model->getParameterByName('comment')) ? $_->getValueAt(0)->getSPLExpression() : '';
$parserOpt->{'globalDelimiter'} = ($_ = $model->getParameterByName('globalDelimiter')) ? $_->getValueAt(0)->getSPLExpression() : '';
$parserOpt->{'globalSkipper'} = ($_ = $model->getParameterByName('globalSkipper')) ? AdaptiveParserCommon::getSkipper($_->getValueAt(0)->getSPLExpression()) : 'space';
$parserOpt->{'skipper'} = $parserOpt->{'skipperLast'} = $parserOpt->{'globalSkipper'};
$parserOpt->{'prefix'} = ($_ = $model->getParameterByName('prefix')) ? $_->getValueAt(0)->getSPLExpression() : '';
$parserOpt->{'suffix'} = ($_ = $model->getParameterByName('suffix')) ? $_->getValueAt(0)->getSPLExpression() : '';
$parserOpt->{'undefined'} = $model->getParameterByName('undefined');

my $oTupleCppType = 'oport0';
my $oTupleSplType = $model->getOutputPortAt(0)->getSPLTupleType();
my $oTupleSrcLocation = $model->getOutputPortAt(0)->getSourceLocation();
my $structs = [];

my $oAttrParams = $model->getOutputPortAt(0);
#my %oAttrNames = map { $_->getName() => ($_->hasAssignment() ? $_ : undef) } @{$model->getOutputPortAt(0)->getAttributes()};

my $FUSION_MAX_VECTOR_SIZE = 10;
AdaptiveParserCommon::buildStructs($oTupleSrcLocation, $oTupleCppType, $oTupleSplType, $structs, $oAttrParams, $parserOpt, \$FUSION_MAX_VECTOR_SIZE);
# [----- perl code -----]%>

#define FUSION_MAX_VECTOR_SIZE <%=$FUSION_MAX_VECTOR_SIZE > 50 ? 50 : $FUSION_MAX_VECTOR_SIZE%>

#include "Spirit.h"
#include <streams_boost/typeof/typeof.hpp>
#include <streams_boost/foreach.hpp>

#define foreach STREAMS_BOOST_FOREACH

<%SPL::CodeGen::headerPrologue($model);%>
 
typedef MY_BASE_OPERATOR::OPort0Type oport0;

struct boolean_ : qi::symbols<char, bool> {
	boolean_() {
		add
			("T", true)
			("F", false)
			("t", true)
			("f", false)
			("TRUE", true)
			("FALSE", false)
			("true", true)
			("false", false)
			("1", true)
			("0", false);
	}
} boolean;

<%if ($parserOpt->{'undefined'}) {
	my $undefValue;
	my @undefinedValues = map { $_->getSPLExpression() ne '""' ? '('.$_->getSPLExpression().', qi::unused)' : () } @{$parserOpt->{'undefined'}->getValues()};
	SPL::CodeGen::errorln("Empty values cannot be assigned to parameter 'undefined'", $oTupleSrcLocation)  unless (@undefinedValues);%>

struct undefined_ : qi::symbols<char, qi::unused_type> {
	undefined_() {
		
		add <%=@undefinedValues%> ;
	}
} undefined;

<%}%>


<%# [----- perl code -----]
my $baseRule = 'oport0_base';

for my $symbols (values %{$structs->[-1]->{'symbols'}}) {
	my @symbol = values %{$symbols};
print qq(
	@symbol
);
}
 
# [----- perl code -----]%>

template <typename Iterator>
struct TupleParserGrammar : qi::grammar<Iterator, oport0(bool&)> {

	static inline SPL::timestamp parseTS(const std::string& format, const std::string& ts) {
		struct tm sysTm;
		if(strptime(ts.c_str(), format.c_str(), &sysTm)) {
			return SPL::timestamp(mktime(&sysTm),0,0);
		}
		else {
			return SPL::timestamp();
		}
	}
 
    TupleParserGrammar() : TupleParserGrammar::base_type(<%=$baseRule%>) {
    	using namespace ::ext;
//    	qi::real_parser<double, qi::strict_ureal_policies<double> > double_;
//    	qi::real_parser<float, qi::strict_ureal_policies<float> > float_;

    	const std::string dq = "\"";

<%# [----- perl code -----]

foreach my $struct (@{$structs}) {
if (scalar %{$struct}) {
	my $skipper = $struct->{'skipper'} ? "skip($struct->{'skipper'})" : 'lexeme';
	my $rule = join(" >> ", @{$struct->{'ruleBody'}});
	$rule = $skipper."[$rule]";
	$rule .= " >> attr(0)" if ($struct->{'size'} <= 1); # patch for single element tuple - no need from Streams 3.2.2
	$rule = "!lit($parserOpt->{'comment'})[_r1 = val(true)] >> eps[_r1 = val(false)] >> $rule" if ($struct->{'cppType'} eq 'oport0' && $parserOpt->{'comment'});
	#$rule = "&lit($parserOpt->{'comment'})[_r1 = val(true)] | (eps[_r1 = val(false)] >> $rule)" if ($struct->{'cppType'} eq 'oport0' && $parserOpt->{'comment'});
print qq(
		$struct->{'ruleName'} %= $rule;
);
}
}
# [----- perl code -----]%>

//		timestamp = (long_ >> lit(_r1) >> uint_) [_val = construct<SPL::timestamp>(_1, _2, val(0))];
//		timestampS = skip(blank)[eps] >> ("(" >> long_ >> "," >> uint_ >> "," >> uint_ >> ")") [_val = construct<SPL::timestamp>(_1, _2, _3)];
		timestamp = skip(blank)[eps] >> long_[bind(&SPL::timestamp::setSeconds,_val,_1)] >> lit(_r1) >> uint_[bind(&SPL::timestamp::setNanoSeconds,_val,_1)];
		timestampS = skip(blank)[eps] >> "(" >> long_[bind(&SPL::timestamp::setSeconds,_val,_1)] >> "," >> uint_[bind(&SPL::timestamp::setNanoSeconds,_val,_1)] >> "," >> int_[bind(&SPL::timestamp::setMachineId,_val,_1)] >> ")";
//		timestampF = (skip(blank)[eps] >> STR_(,)) [_val = bind(&TupleParserGrammar<charPtr>::parseTS, _r1, construct<std::string>(bind(&iterator_range<charPtr>::begin,_1), bind(&iterator_range<charPtr>::end,_1)))];

    	<%=$baseRule%>.name("oport0");

//		on_error<fail> (<%=$baseRule%>, std::cout
//				<< val("Error! Expecting ")
//				<< _4                               // what failed?
//				<< val("\nhere:")
//				<< std::endl
//				<< construct<std::string>(_3, _2)   // iterators to error-pos, end
//				<< std::endl
//		);

//			debug(oport0);
    }

	qi::rule<Iterator,  SPL::timestamp(std::string)> timestamp;
	qi::rule<Iterator,  SPL::timestamp()> timestampS;
	qi::rule<Iterator,  SPL::timestamp(std::string)> timestampF;

    qi::rule<Iterator, oport0(bool&)> oport0_base;
    
<%# [----- perl code -----]

foreach my $struct (@{$structs}) {
if (scalar %{$struct} && $struct->{'cppType'} ne 'oport0') {
print qq(
	qi::rule<Iterator, $struct->{'cppType'}()> $struct->{'ruleName'};
);
}
}
# [----- perl code -----]%>
};

class MY_OPERATOR : public MY_BASE_OPERATOR {
public:
  MY_OPERATOR();
  virtual ~MY_OPERATOR(); 

  void allPortsReady(); 
  void prepareToShutdown(); 

  void process(Tuple const & tuple, uint32_t port);
  void process(Punctuation const & punct, uint32_t port);

  inline void setInputIterators(const blob & raw, charPtr & iter_start, charPtr & iter_end) {
	iter_start = raw.getData();
	iter_end = raw.getData() + raw.getSize();
  }
  
  inline void setInputIterators(const std::string & row, charPtr & iter_start, charPtr & iter_end) {
	iter_start = (charPtr)row.data();
	iter_end = (charPtr)(iter_start + row.size());
  }

private:
	TupleParserGrammar<charPtr> tupleParser;
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

typedef <%=$model->getOutputPortAt(0)->getCppTupleType()%> oport0;

<%# [----- perl code -----]
if (defined($structs->[-1]->{'xml'})) {
	my @xmlDefs = values %{$structs->[-1]->{'xml'}};
	
	foreach my $xml (@xmlDefs) {
print qq(
	$xml
);
	}

}
 
foreach my $struct (@{$structs}) {
print qq(
	$struct->{'traits'}
	$struct->{'extension'}
);
}
# [----- perl code -----]%>
